@using mes.Models.ViewModels
@using System.Collections.Generic
@model MachineStatusPicker
@{
    List<string> allMachines = ViewBag.allMachines;
    int avanzamento = ViewBag.avanzamento;
    string statusColor = "";

    int automatico = Convert.ToInt16(ViewBag.automatico);
    int attesa = Convert.ToInt16(ViewBag.attesa);
    int manuali = Convert.ToInt16(ViewBag.manuali);
    int scollegata = Convert.ToInt16(ViewBag.scollegata);
    string dataInizio = ViewBag.dataInizio;
    string dataFine = ViewBag.dataFine;

    List<MachineStatustPickerWeek> oneWeek = ViewBag.oneWeekStatus;
    List<KeyValuePair<string, string>> oneWeekProgs = ViewBag.oneWeekProgs;
    string calendarStartDate = ViewBag.calendarStartDate;
    string calendarEndDate = ViewBag.calendarEndDate;

    int numberOfDays = oneWeek?.Count ?? 0; // Safe count, handles null
}

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>

  <style>
    
    .row.content {
        height: 850px
    }
        
    .sidenav {
      background-color: #f1f1f1;
      height: 100%;
    }

    th, td {
      width: 180px;
      text-align: left;
      font-size: 16px;   
    }
    .machine:hover {
      background-color: rgb(188, 248, 248);
    }
    th {
      font-size: 30px;
      padding-left: 10px;
    }
    tr {
      
    }
    table {
      width: 100%;
    }
    
    .loader-container {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 9999;
    }

    .loader {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

  </style>

<nav class="navbar navbar-inverse visible-xs">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">Macchine</a>
        </div>
        <div class="collapse navbar-collapse" id="myNavbar">
            <table>
                <tr style="border-bottom: 0px;">
                    <td>Tutte</td>
                </tr>
                <tr>
                    <td><br></td>
                </tr>
                @foreach (string oneMachine in allMachines)
                {
                    <tr style="border-bottom: 0px;">
                        <td class="machine">@oneMachine</td>
                    </tr>
                    <tr>
                        <td><br></td>
                    </tr>
                }
            </table>
        </div>
    </div>
</nav>

<div class="container-fluid">
    <div class="row content">
        <div class="col-sm-2 sidenav hidden-xs">
            <h2>Macchine</h2>
            <br>
            <table class="machine-list">
                <tr style="border-bottom: 0px;">
                    <td><a asp-controller="Mes" asp-action="ProductionStatus">Tutte</a></td>
                </tr>
                @foreach (string oneMachine in allMachines)
                {
                    <tr style="border-bottom: 0px;">
                        <td class="machine" style="padding-left:10px;"><a asp-controller="Mes" asp-action="GetMachineHistory" asp-route-machineName="@oneMachine">@oneMachine</a></td>
                    </tr>
                }
            </table>
        </div>

        <div class="col-sm-10">
            <div class="well">
                <h2>@Model.MachineName</h2>
            </div>

            <form asp-controller="Mes" asp-action="GetMachineHistory" method="get">
                <div class="row">
                    <div class="col-sm-2">
                        <div class="form-group">
                            <label for="startDate">Data inizio:</label>
                            <input type="date" class="form-control" id="startDate" name="startDate" value="@ViewBag.calendarStartDate" />
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-group">
                            <label for="endDate">Data fine:</label>
                            <input type="date" class="form-control" id="endDate" name="endDate" value="@ViewBag.calendarEndDate" />
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <button type="button" class="btn btn-primary btn-block" style="margin-top: 25px;" onclick="aggiornaDate()">aggiorna</button>
                    </div>
                </div>
            </form>

            <div class="row">
                <div class="col-sm-2">
                    @{
                        if (Model.MachineState == "start - automatico" || Model.MachineState == "connessa")
                        {
                            statusColor = "rgb(0, 175, 0)";
                        }
                        else if (Model.MachineState == "in attesa")
                        {
                            statusColor = "rgb(92, 204, 219)";
                        }
                        else if (Model.MachineState == "mov.manuali")
                        {
                            statusColor = "orange";
                        }
                        else if (Model.MachineState == "emergenza")
                        {
                            statusColor = "rgb(207, 0, 0)";
                        }
                        else if (Model.MachineState == "non connessa")
                        {
                            statusColor = "grey";
                        }
                    }
                    <div class="well" style="background-color: @statusColor;">
                        <h4>Stato</h4>
                        <h3>@Model.MachineState</h3>
                    </div>
                </div>

                @if (Model.MachineType == "BIESSE1" || Model.MachineType == "SCM1" || Model.MachineType == "INTERMAC1")
                {
                    <div class="col-sm-2">
                        <div class="well">
                            <h4>Distinta</h4>
                            <h3>@Model.WorklistName</h3>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="well">
                            <h4>Programma</h4>
                            <h3>@Model.ProgramName</h3>
                        </div>
                    </div>
                    <div class="col-sm-1">
                        <div class="well">
                            <h4 style="text-align: center;">Contatore</h4>
                            <h2 style="text-align: center;">@Model.Counter</h2>
                        </div>
                    </div>
                    <div class="col-sm-1">
                        <div class="well">
                            <h4 style="text-align: center;">Richiesti</h4>
                            <h2 style="text-align: center;">@Model.Quantity</h2>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="well">
                            <h4 style="text-align: center;">avanzamento</h4>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" style="width:@avanzamento%">@avanzamento%</div>
                            </div>
                        </div>
                    </div>
                }
                else if (Model.MachineType == "SCM2")
                {
                    <div class="col-sm-3">
                        <div class="well">
                            <h4>Programma</h4>
                            <h3>@Model.ProgramName</h3>
                        </div>
                    </div>
                    <div class="col-sm-1">
                        <div class="well">
                            <h4 style="text-align: center;">Spessore</h4>
                            <h3 style="text-align: center;">@Model.Thickness</h3>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="well">
                            <h4 style="text-align: center;">Bordo</h4>
                            <h2 style="text-align: center;">@Model.EdgeName</h2>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="well">
                            <h4 style="text-align: center;">cons.bordo</h4>
                            <h2 style="text-align: center;">@Model.EdgeConsumption</h2>
                        </div>
                    </div>
                    <div class="col-sm-1">
                        <div class="well">
                            <h4 style="text-align: center;">Passaggio</h4>
                            <h3 style="text-align: center;">@Model.Passage</h3>
                        </div>
                    </div>
                    <div class="col-sm-1">
                        <div class="well">
                            <h4 style="text-align: center;">Velocit√†</h4>
                            @{
                                string vel = (Model.TrackSpeed != " ") ? Model.TrackSpeed : "--";
                            }
                            <h3 style="text-align: center;">@vel</h3>
                        </div>
                    </div>
                }
                else if (Model.MachineType == "AKRON")
                {
                    <div class="col-sm-3">
                        <div class="well">
                            <h4>Bordo</h4>
                            <h3>@Model.WorklistName</h3>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="well">
                            <h4>Programma</h4>
                            <h3>@Model.ProgramName</h3>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="well">
                            <h4 style="text-align: center;">Totale metri</h4>
                            @{
                                string metri = Model.TotalMeters.Substring(0, Model.TotalMeters.IndexOf('.') + 2);
                            }
                            <h2 style="text-align: center;">@metri</h2>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="well">
                            <h4 style="text-align: center;">Totale pannelli</h4>
                            <h2 style="text-align: center;">@Model.TotalPanels</h2>
                        </div>
                    </div>
                }
            </div>

            <div class="row">
                <div class="col-sm-4">
                    <div class="well">
                        <canvas id="myChart" style="width:100%;max-width:600px"></canvas>
                    </div>
                </div>
                <div class="col-sm-8">
                    <div class="well">
                        <canvas id="weekChart" style="width:100%;max-width:950px"></canvas>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-12">
                    <div class="well">
                        <h4>ultimi sette programmi eseguiti</h4>
                        <table>
                            <tr>
                                <th style="font-size:16px;">distinta</th>
                                <th style="font-size:16px;">programma</th>
                            </tr>
                            @foreach (KeyValuePair<string, string> item in oneWeekProgs)
                            {
                                <tr>
                                    <td style="font-size:16px;">@item.Key</td>
                                    <td style="font-size:16px;">@item.Value</td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function aggiornaDate() {
        var machineName = "@Model.MachineName";
        var startDate = document.getElementById("startDate").value;
        var endDate = document.getElementById("endDate").value;

        var url = "/Mes/GetMachineHistory?MachineName=" + encodeURIComponent(machineName) +
            "&startDate=" + encodeURIComponent(startDate) +
            "&endDate=" + encodeURIComponent(endDate);

        window.location.href = url;
    }

    // Pie chart
    var xValues = ["automatico", "in attesa", "mov.manuali", "scollegata"];
    var yValues = [@automatico, @attesa, @manuali, @scollegata];
    var barColors = [
        "#1e7145",
        "#00aba9",
        "#2b5797",
        "#b91d47"
    ];

    new Chart("myChart", {
        type: "pie",
        data: {
            labels: xValues,
            datasets: [{
                backgroundColor: barColors,
                data: yValues
            }]
        },
        options: {
            title: {
                display: true,
                text: "complessivo tempi macchina (in %) dal @dataInizio al @dataFine"
            }
        }
    });

    // Bar chart (dynamic)

    const oneWeek = @Html.Raw(Json.Serialize(ViewBag.oneWeekStatus));

    const xValues2 = [];
    const waitingData = [];
    const startData = [];
    const manualMovementsData = [];
    const emergencyData = [];
    const notConnectedData = [];
    const connectedData = [];

    if (oneWeek && Array.isArray(oneWeek)) {
        for (let i = oneWeek.length - 1; i >= 0; i--) {
            xValues2.push(oneWeek[i].day);  // Make sure property casing is EXACTLY correct
            waitingData.push(oneWeek[i].waiting);  // Check casing here too!
            startData.push(oneWeek[i].start);
            manualMovementsData.push(oneWeek[i].manualMovements);
            emergencyData.push(oneWeek[i].emergency);
            notConnectedData.push(oneWeek[i].notConnected);
            connectedData.push(oneWeek[i].connected);
        }
    } else {
        console.error("oneWeek data is not valid:", oneWeek); // Debugging: Check the console!
    }

    new Chart("weekChart", {
        type: "bar",
        data: {
            labels: xValues2,
            datasets: [{
                label: 'in attesa',
                data: waitingData,
                borderColor: "orange",
                backgroundColor: "orange",
                fill: false
            }, {
                label: 'start',
                data: startData,
                borderColor: "green",
                backgroundColor: "green",
                fill: false
            }, {
                label: 'mov.manuali',
                data: manualMovementsData,
                borderColor: "blue",
                backgroundColor: "blue",
                fill: false
            }, {
                label: 'emergenza',
                data: emergencyData,
                borderColor: "red",
                backgroundColor: "red",
                fill: false
            }, {
                label: 'scollegata',
                data: notConnectedData,
                borderColor: "grey",
                backgroundColor: "grey",
                fill: false
            }, {
                label: 'collegata',
                data: connectedData,
                borderColor: "cyan",
                backgroundColor: "cyan",
                fill: false
            }]
        },
        options: {
            legend: {
                display: true
            },
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true  // Start the Y axis at 0
                    }
                }]
            }
        }
    });
</script>