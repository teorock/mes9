@using mes.Models.ViewModels;
@using mes.Models.InfrastructureModels;

@{
    ViewBag.Title = "Modifica Pfc";
    List<string> customers = ViewBag.Customers;
    int nCommessa = Convert.ToInt32(Model.id);
    string nCommessaTitle = Model.WorkNumber;
    string userRoles = ViewBag.userRoles;

    bool cannotSign = true;
    if(!userRoles.Contains("PfcQualita")||!userRoles.Contains("PfcCrea")||!userRoles.Contains("root")) cannotSign=false;

    bool cannotCreate= true;
    if(userRoles.Contains("PfcCrea")||userRoles.Contains("root")) cannotCreate=false;        

    string cannotUpdate = "enabled";
    bool cannotUpdateBool = false;
    if(userRoles.Contains("PfcAggiorna"))
    { cannotUpdate = "disabled";
    cannotUpdateBool = true;
    }

    // Generate unique IDs for the dropdown elements
    string dropdownButtonId = $"externalRefsDropdownButton_{Guid.NewGuid().ToString("N").Substring(0, 8)}";
    string dropdownMenuId = $"externalRefsDropdownMenu_{Guid.NewGuid().ToString("N").Substring(0, 8)}";
    string validationDivId = $"externalRefsValidation_{Guid.NewGuid().ToString("N").Substring(0, 8)}";
    string hiddenCsvInputId = $"externalRefsCsv_{Guid.NewGuid().ToString("N").Substring(0, 8)}";

    List<PfcCsvDaneaSource> allDaneaOrders = ViewBag.allDaneaOrders;
}
    
@model WorkorderViewModel;

@section Styles {
    <style>
        /* Styles for checkbox dropdown */
        .checkbox-dropdown .dropdown-menu { padding: 0.5rem 0; max-height: 250px; overflow-y: auto; width: 100%; }
        .checkbox-dropdown .dropdown-item-text { padding: 0.25rem 1rem; cursor: default; display: block; white-space: normal; }
        .checkbox-dropdown .dropdown-item-text:hover { background-color: #f8f9fa; }
        .checkbox-dropdown .form-check-label { cursor: pointer; width: 100%; }
        .checkbox-dropdown .btn.is-invalid { border-color: var(--bs-danger); }
    </style>
}

<div class="container">

<div class="container">
    <h2>Modifica PFC</h2>
    <br>
    <hr>
    @using (Html.BeginForm("ModPfc", "Pfc", FormMethod.Post, new { @class = "form", id = "worktableForm" }))
    {
        <div class="row">
            <div class="col-md-3">
                <h4>modulo numero</h4>
            </div>
            <div class="col-md-3">
                <h4>@nCommessaTitle</h4>
                <input type="hidden" name="WorkNumber" value="@Model.WorkNumber">
                <input type="hidden" name="id" value="@Model.id">
            </div>
        </div>
        <br>
        <div class="row mb-3">
            <div class="col-md-2">
                <label for="customer" class="form-label">Cliente</label>
            </div>
            <div class="col-md-6">
                <select class="form-select" id="customer" name="Customer" required @cannotUpdate>
                    <option value="" disabled>seleziona un cliente</option>
                    @foreach (var customer in customers)
                    {
                        string selected = (Model.Customer == customer) ? "selected" : "";
                        <option value="@customer" selected="@(Model.Customer == customer ? "selected" : null)">@customer</option>
                    }
                </select>
            </div>


                <div class="col-md-2">
                    <label for="deliveryDate" class="form-label" style="text-align: right;">Data di consegna</label>
                </div>
                <div class="col-md-2">
                    <input type="date" class="form-control" id="deliveryDate" name="deliveryDate" value="@Model.deliveryDate.ToString("yyyy-MM-dd")" required disabled="@cannotUpdateBool">
                    <input type="hidden" id="hiddenDeliveryDate" name="deliveryDate" value="@Model.deliveryDate.ToString("yyyy-MM-dd")">
                </div>


        </div>

        <!-- Checkbox Dropdown Section -->
        <div class="row mb-3">
            <div class="col-md-2">
                <label class="form-label pt-1">Commesse Correlate</label>
            </div>
            <div class="col-md-10">
                <div class="dropdown checkbox-dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button"
                            id="@dropdownButtonId" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false" @cannotUpdate>
                        Seleziona Commesse
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="@dropdownButtonId" id="@dropdownMenuId">
                        @if (allDaneaOrders != null && allDaneaOrders.Any())
                        {
                            int orderIndex = 0;
                            foreach (var order in allDaneaOrders)
                            {
                                string checkboxId = $"selectableOrderCheck_{orderIndex}";
                                bool isChecked = order.Taken == "1";
                                <li>
                                    <div class="dropdown-item-text">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="SelectedExternalRefs_Source"
                                                   value="@order.NCommessa" id="@checkboxId" @(isChecked ? "checked" : "")>
                                            <label class="form-check-label" for="@checkboxId">@order.NCommessa</label>
                                        </div>
                                    </div>
                                </li>
                                orderIndex++;
                            }
                        }
                        else
                        {
                            <li><span class="dropdown-item-text text-muted fst-italic">Nessuna commessa selezionabile disponibile.</span></li>
                        }
                    </ul>
                    <div id="@validationDivId" class="invalid-feedback" style="display: none;">Selezionare almeno una commessa correlata.</div>
                </div>
                <!-- Hidden Input for the CSV string -->
                <input type="hidden" name="ExternalRef" id="@hiddenCsvInputId" value="@Model.ExternalRef" />
            </div>
        </div>
        <!-- End Checkbox Dropdown Section -->

        <br>
        <hr>
        <!-- Row for Work Phases label -->
        <div class="row mb-3">
            <div class="col-12">
                <strong>fasi di lavorazione</strong>
            </div>
        </div>
        <br>
        <!-- Container for dynamic work phase rows -->
        <div id="workPhasesContainer">
            @for (int i = 0; i < Model.WorkPhases.Count; i++)
            {
                var phase = Model.WorkPhases[i];
                <div class="work-phase-row row mb-3">
                    <div class="col-md-2">
                        <select class="form-select work-phase-select" name="WorkPhases[@i].WorkphaseName" required>
                            <option value="" disabled>fase di lavorazione</option>
                            @foreach (var workPhase in ViewBag.WorkPhases)
                            {
                                string selected = (phase.WorkphaseName == workPhase) ? "selected" : "";
                                <option value="@workPhase" selected="@(phase.WorkphaseName == workPhase ? "selected" : null)">@workPhase</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-1 hidden-fields">
                        <input type="hidden" name="WorkPhases[@i].RelatedWorkOrder" value="@nCommessa">
                        <input type="hidden" name="WorkPhases[@i].Id" value="@phase.id">
                    </div>
                    <div class="col-md-2">

                        <!-- div class="form-check mt-1">
                            <input type="hidden" name="WorkPhases[@i].Completed" value="false">
                            <input class="form-check-input" type="checkbox" name="WorkPhases[@i].Completed" id="completed_@i" value="true" @(phase.Completed == "true" ? "checked" : "")>
                            <label class="form-check-label" for="completed_@i">completata</label>
                        </div -->

                    </div>
                    <div class="col-md-2">
                        <div class="form-check mt-1">
                            <input type="hidden" name="WorkPhases[@i].QualityCheck" value="false">
                            <input class="form-check-input" type="checkbox" name="WorkPhases[@i].QualityCheck" id="qualitycheck_@i" value="true" @(phase.QualityCheck == "true" ? "checked" : "") disabled="@cannotSign">
                            <label class="form-check-label" for="qualitycheck_@i">controllo qualit√†</label>
                        </div>

                    </div>
                    <div class="col-md-2">
                        <select class="form-select" name="WorkPhases[@i].QualityOperator" disabled="@cannotSign">
                            <option value="" disabled>firma operatore</option>
                            @foreach (var op in ViewBag.Operators)
                            {
                                string selected = (phase.QualityOperator == op) ? "selected" : "";
                                <option value="@op" selected="@(phase.QualityOperator == op ? "selected" : null)">@op</option>
                            }
                        </select>
                    </div>                
                    <div class="col-md-2">
                        <button type="button" class="btn btn-outline-success btn-block add-row-btn" @cannotUpdate>aggiungi fase</button>
                    </div>
                    <div class="col-md-1">
                        <button type="button" class="btn btn-outline-warning btn-block remove-row-btn" @cannotUpdateBool>rimuovi</button>
                    </div>
                </div>
            }
        </div>

        <div class="row mb-3">
            <div class="col-md-2">
                <button type="submit" id="submitBtn" class="btn btn-primary">Salva</button>
            </div>
            <div class="col-md-2">
                <a class="btn btn-outline-secondary btn-block" asp-controller="Pfc" asp-action="Index">annulla</a>
            </div>
        </div>
    }
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmRemoveModal" tabindex="-1" aria-labelledby="confirmRemoveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmRemoveModalLabel">Conferma Eliminazione</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Sei sicuro di voler eliminare questa fase di lavorazione?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-warning" id="confirmRemoveBtn">Conferma</button>
            </div>
        </div>
    </div>
</div>

<!-- Submit Confirmation Modal -->
<div class="modal fade" id="confirmSubmitModal" tabindex="-1" aria-labelledby="confirmSubmitModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmSubmitModalLabel">Conferma Salvataggio</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Sei sicuro di voler salvare le modifiche?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-primary" id="confirmSubmitBtn">Conferma</button>
            </div>
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        var existingWorks = JSON.parse('@Html.Raw(Json.Serialize(@ViewBag.Works))');
        var rowIndex = @Model.WorkPhases.Count; // Corrected rowIndex initialization.
        var rowToRemove = null;
        var firstOperator = '@(ViewBag.Operators != null && ViewBag.Operators.Count > 0 ? ViewBag.Operators[0] : "")'; //Get first operator
        
        // --- Checkbox Dropdown Logic (jQuery) ---
        var $dropdownMenu = $('#@dropdownMenuId');
        var $dropdownButton = $('#@dropdownButtonId');
        var $validationMessageDiv = $('#@validationDivId');
        var $hiddenCsvInput = $('#@hiddenCsvInputId');

        // Checkboxes used for selection
        var sourceCheckboxSelector = 'input[type="checkbox"][name="SelectedExternalRefs_Source"]';


            $(document).on('change', 'input[type="checkbox"][name$=".QualityCheck"]', function() {
                var isChecked = $(this).prop('checked');
                var hiddenInput = $(this).prev('input[type="hidden"]'); // Get the hidden input right before this checkbox
                
                if (hiddenInput.length) {
                    hiddenInput.val(isChecked.toString().toLowerCase());
                }
            });

            // Initialize all existing QualityCheck checkboxes on page load
            $('input[type="checkbox"][name$=".QualityCheck"]').each(function() {
                var isChecked = $(this).prop('checked');
                var hiddenInput = $(this).prev('input[type="hidden"]');
                
                if (hiddenInput.length) {
                    hiddenInput.val(isChecked.toString().toLowerCase());
                }
            });

        function updateButtonText() {
            var $checkedCheckboxes = $dropdownMenu.find(sourceCheckboxSelector + ':checked');
            var count = $checkedCheckboxes.length;
            
            // Update button text logic
            if (count === 0) {
                $dropdownButton.text('Seleziona Commesse');
            } else {
                var selectedLabels = $checkedCheckboxes.map(function() {
                    return $(this).closest('.form-check').find('label').text().trim();
                }).get();
                
                if (count <= 2) {
                    $dropdownButton.text(selectedLabels.join(', '));
                } else {
                    $dropdownButton.text(count + ' commesse selezionate');
                }
            }
            
            // Clear validation state
            $dropdownButton.removeClass('is-invalid');
            $validationMessageDiv.hide();
            
            // Update the hidden input with CSV string
            updateHiddenCsvInput();
        }
        
        function updateHiddenCsvInput() {
            var $checkedCheckboxes = $dropdownMenu.find(sourceCheckboxSelector + ':checked');
            var selectedValuesArray = $checkedCheckboxes.map(function() {
                return $(this).val();
            }).get();
            var csvString = selectedValuesArray.join(',');
            $hiddenCsvInput.val(csvString);
        }

        $('#deliveryDate').on('change', function() {
            $('#hiddenDeliveryDate').val($(this).val());
        });

        // Event handler for checkbox changes
        $dropdownMenu.on('change', sourceCheckboxSelector, function() {
            updateButtonText();
        });
        
        // Initialize button text based on initial checkbox states
        updateButtonText();
        // --- End Checkbox Dropdown Logic ---

        $('#work').on('change', function () {
            var workValue = $(this).val();
            if (existingWorks.includes(workValue) && workValue !== '@Model.Description') {
                $(this).addClass('is-invalid');
            } else {
                $(this).removeClass('is-invalid');
            }
        });

         // Function to update hidden input based on checkbox state
        function updateHiddenInput($checkbox) {
            var isChecked = $checkbox.prop('checked');
            var hiddenInput = $checkbox.closest('.form-check').find('input[type="hidden"]');
            hiddenInput.val(isChecked.toString().toLowerCase());
        }

        // Handle existing and dynamically added checkboxes
        $(document).on('change', 'input[type="checkbox"][name$=".Completed"]', function() {
            updateHiddenInput($(this));
        });

        // Initialize all existing checkboxes on page load
        $('input[type="checkbox"][name$=".Completed"]').each(function() {
            updateHiddenInput($(this));
        });


        $(document).on('change', '.work-phase-select', function () {
            var row = $(this).closest('.work-phase-row');
            var addButton = row.find('.add-row-btn');
            var removeButton = row.find('.remove-row-btn');
            var hasValue = $(this).val() !== '';

            addButton.prop('disabled', !hasValue);
            removeButton.prop('disabled', !hasValue);
        });

        // Handle remove button click to show modal
        $(document).on('click', '.remove-row-btn', function () {
            rowToRemove = $(this).closest('.work-phase-row');
            $('#confirmRemoveModal').modal('show');
        });

        // Handle confirmation in modal
        $('#confirmRemoveBtn').on('click', function () {
            if (rowToRemove) {
                rowToRemove.remove();
                rowToRemove = null;
            }
            $('#confirmRemoveModal').modal('hide');
        });

        // Add new row when "Add" button is clicked
        $(document).on('click', '.add-row-btn', function () {
            // Clone the *first* row.
            var newRow = $($('.work-phase-row')[0]).clone();


            // Update IDs and names
            newRow.find('select, input').val('');
            // Ensure checkboxes are unchecked
            newRow.find('input[type="checkbox"]').prop('checked', false);
            newRow.find('select[name^="WorkPhases"]').first().attr('name', 'WorkPhases[' + rowIndex + '].WorkphaseName');

            // Update hidden fields
            newRow.find('input[name$=".RelatedWorkOrder"]').attr('name', 'WorkPhases[' + rowIndex + '].RelatedWorkOrder').val('@Model.id');
            newRow.find('input[name$=".Id"]').attr('name', 'WorkPhases[' + rowIndex + '].Id').val(0);

            // Update other fields
            // Update other fields
            // Update checkboxes and add hidden fields for "Completed"
            newRow.find('input[id^="completed"]').attr({
                'name': 'WorkPhases[' + rowIndex + '].Completed',
                'id': 'completed_' + rowIndex
            });

            // Update checkboxes and add hidden fields for "QualityCheck"
            newRow.find('input[id^="qualitycheck"]').attr({
                'name': 'WorkPhases[' + rowIndex + '].QualityCheck',
                'id': 'qualitycheck_' + rowIndex,
                'value': 'true'
            });

            // Update or add hidden field for unchecked state
            var qualityCheckHidden = newRow.find('input[type="hidden"][name$=".QualityCheck"]');
            if (qualityCheckHidden.length) {
                qualityCheckHidden.attr('name', 'WorkPhases[' + rowIndex + '].QualityCheck').val('false');
            } else {
                newRow.find('#qualitycheck_' + rowIndex).after('<input type="hidden" name="WorkPhases[' + rowIndex + '].QualityCheck" value="false">');
            }
            newRow.find('label[for^="qualitycheck"]').attr('for', 'qualitycheck_' + rowIndex);

            //Update QualityOperator select element
            var qualityOperatorSelect = newRow.find('select[name$=".QualityOperator"]');
            qualityOperatorSelect.attr('name', 'WorkPhases[' + rowIndex + '].QualityOperator');

            // Set the selected option to the first operator
            qualityOperatorSelect.val(firstOperator);

            // Enable the Add and Remove buttons for populated rows
            newRow.find('.add-row-btn').prop('disabled', false);
            newRow.find('.remove-row-btn').prop('disabled', false);

            $('#workPhasesContainer').append(newRow);
            rowIndex++; // Increment rowIndex *after* appending.
        });

        // Initialize buttons state on page load
        $('.work-phase-select').each(function () {
            var row = $(this).closest('.work-phase-row');
            var addButton = row.find('.add-row-btn');
            var removeButton = row.find('.remove-row-btn');
            var hasValue = $(this).val() !== '';

            addButton.prop('disabled', !hasValue);
            removeButton.prop('disabled', !hasValue);
        });

        // Show submit confirmation modal
        $('#submitBtn').on('click', function (e) {
            e.preventDefault(); // Prevent the form from submitting immediately
            
            // Validate the dropdown selection
            var $dropdownCheckboxes = $dropdownMenu.find(sourceCheckboxSelector);
            var $checkedDropdownCheckboxes = $dropdownCheckboxes.filter(':checked');
            var checkedDropdownCount = $checkedDropdownCheckboxes.length;
            
            var isValid = true;
            
            if (checkedDropdownCount === 0 && $dropdownCheckboxes.length > 0) {
                $dropdownButton.addClass('is-invalid');
                $validationMessageDiv.show();
                isValid = false;
            } else {
                $dropdownButton.removeClass('is-invalid');
                $validationMessageDiv.hide();
                
                // Update hidden input with final CSV value
                updateHiddenCsvInput();
            }
            
            if (isValid) {
                // Proceed with showing confirmation modal
                $('#confirmSubmitModal').modal('show');
            } else {
                // Focus on the first invalid element
                var $firstError = $('.is-invalid').first();
                if ($firstError.length) {
                    $('html, body').animate({
                        scrollTop: $firstError.offset().top - 100
                    }, 500, function() {
                        if ($firstError.is(':input, button')) {
                            $firstError.focus();
                        }
                    });
                }
            }
        });

        // Handle confirmation in submit modal
        $('#confirmSubmitBtn').on('click', function () {

            var dateVal = $('#deliveryDate').val();
            $('#hiddenDeliveryDate').val(dateVal);

            // Disable original checkboxes to prevent them from being submitted directly
            $(sourceCheckboxSelector).prop('disabled', true);
            
            // Submit the form
            $('#worktableForm').submit();
        });
    });
</script>