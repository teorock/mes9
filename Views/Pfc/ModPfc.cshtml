@using mes.Models.ViewModels;

@{
    ViewBag.Title = "Modify Worktable";
    List<string> customers = ViewBag.Customers;
    int nCommessa = Convert.ToInt32(Model.id);
    string nCommessaTitle = Model.WorkNumber;
}

@model WorkorderViewModel;

<div class="container">
    <h2>Modifica PFC</h2>
    <br>
    <hr>
    @using (Html.BeginForm("ModPfc", "Pfc", FormMethod.Post, new { @class = "form", id = "worktableForm" }))
    {
        <div class="row">
            <div class="col-md-3">
                <h4>numero commessa</h4>
            </div>
            <div class="col-md-3">
                <h4>@nCommessaTitle</h4>
                <input type="hidden" name="WorkNumber" value="@Model.WorkNumber">
                <input type="hidden" name="id" value="@Model.id">
            </div>
        </div>
        <br>
        <div class="row mb-3">
            <div class="col-md-2">
                <label for="customer" class="form-label">Cliente</label>
            </div>
            <div class="col-md-6">
                <select class="form-select" id="customer" name="Customer" required>
                    <option value="" disabled>seleziona un cliente</option>
                    @foreach (var customer in customers)
                    {
                        string selected = (Model.Customer == customer) ? "selected" : "";
                        <option value="@customer" selected="@(Model.Customer == customer ? "selected" : null)">@customer</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label for="deliveryDate" class="form-label" style="text-align: right;">Data di consegna</label>
            </div>
            <div class="col-md-2">
                <input type="date" class="form-control" id="deliveryDate" name="Delivery" value="@Model.Delivery.ToString("yyyy-MM-dd")" required>
            </div>
        </div>

        <!-- Row for Work with validation -->
        <div class="row mb-3">
            <div class="col-md-2">
                <label for="work" class="form-label">Descrizione</label>
            </div>
            <div class="col-md-10">
                <input type="text" class="form-control" id="work" name="Description" value="@Model.Description" required>
                <div class="invalid-feedback">numero di commessa già esistente</div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-2">
                <label for="externalRef" class="form-label">Riferimento esterno</label>
            </div>
            <div class="col-md-10">
                <input type="text" class="form-control" id="externalRef" name="ExternalRef" value="@Model.ExternalRef" required>
                <div class="invalid-feedback">Riferimento esterno già esistente</div>
            </div>
        </div>
        <br>
        <hr>
        <!-- Row for Work Phases label -->
        <div class="row mb-3">
            <div class="col-12">
                <strong>fasi di lavorazione</strong>
            </div>
        </div>
        <br>
        <!-- Container for dynamic work phase rows -->
        <div id="workPhasesContainer">
            @for (int i = 0; i < Model.WorkPhases.Count; i++)
            {
                var phase = Model.WorkPhases[i];
                <div class="work-phase-row row mb-3">
                    <div class="col-md-2">
                        <select class="form-select work-phase-select" name="WorkPhases[@i].WorkphaseName" required>
                            <option value="" disabled>fase di lavorazione</option>
                            @foreach (var workPhase in ViewBag.WorkPhases)
                            {
                                string selected = (phase.WorkphaseName == workPhase) ? "selected" : "";
                                <option value="@workPhase" selected="@(phase.WorkphaseName == workPhase ? "selected" : null)">@workPhase</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-1 hidden-fields">
                        <input type="hidden" name="WorkPhases[@i].RelatedWorkOrder" value="@nCommessa">
                        <input type="hidden" name="WorkPhases[@i].Id" value="@phase.id">
                    </div>
                    <div class="col-md-2">
                       
                        <div class="form-check mt-1">

                            <input class="form-check-input" type="checkbox" name="WorkPhases[@i].Completed" id="completed_@i" value="true" @(phase.Completed == "true" ? "checked" : "")>
                            <label class="form-check-label" for="completed_@i">completata</label>
                        </div>

                    </div>
                    <div class="col-md-2">
                      
                        <div class="form-check mt-1">

                            <input class="form-check-input" type="checkbox" name="WorkPhases[@i].QualityCheck" id="qualitycheck_@i" value="true" @(phase.QualityCheck == "true" ? "checked" : "")>
                            <label class="form-check-label" for="qualitycheck_@i">controllo qualità</label>
                        </div>

                    </div>
                    <div class="col-md-2">
                        <select class="form-select" name="WorkPhases[@i].QualityOperator">
                            <option value="" disabled>firma operatore</option>
                            @foreach (var op in ViewBag.Operators)
                            {
                                string selected = (phase.QualityOperator == op) ? "selected" : "";
                                <option value="@op" selected="@(phase.QualityOperator == op ? "selected" : null)">@op</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-outline-success btn-block add-row-btn">aggiungi fase</button>
                    </div>
                    <div class="col-md-1">
                        <button type="button" class="btn btn-outline-warning btn-block remove-row-btn">rimuovi</button>
                    </div>
                </div>
            }
        </div>

        <!-- Submit button -->
        <div class="row mt-4">
            <div class="col-12">
                <button type="submit" class="btn btn-primary">salva modifiche</button>
            </div>
        </div>
    }
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmRemoveModal" tabindex="-1" aria-labelledby="confirmRemoveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmRemoveModalLabel">Conferma Eliminazione</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Sei sicuro di voler eliminare questa fase di lavorazione?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-danger" id="confirmRemoveBtn">Conferma</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        var existingWorks = JSON.parse('@Html.Raw(Json.Serialize(@ViewBag.Works))');
        var rowIndex = @Model.WorkPhases.Count - 1;
        var rowToRemove = null;

        $('#work').on('change', function () {
            var workValue = $(this).val();
            if (existingWorks.includes(workValue) && workValue !== '@Model.Description') {
                $(this).addClass('is-invalid');
            } else {
                $(this).removeClass('is-invalid');
            }

// Function to update hidden input based on checkbox state
function updateHiddenInput($checkbox) {
    var isChecked = $checkbox.prop('checked');
    var hiddenInput = $checkbox.closest('.form-check').find('input[type="hidden"]');
    hiddenInput.val(isChecked.toString().toLowerCase());
}

// Handle existing and dynamically added checkboxes
$(document).on('change', 'input[type="checkbox"][name$=".Completed"]', function() {
    updateHiddenInput($(this));
});

// Initialize all existing checkboxes on page load
$('input[type="checkbox"][name$=".Completed"]').each(function() {
    updateHiddenInput($(this));
});

// Add this to your add-row-btn click handler
// After creating the new row and before appending it:
newRow.find('input[type="checkbox"][name$=".Completed"]').each(function() {
    updateHiddenInput($(this));
});
            
        });

        $(document).on('change', '.work-phase-select', function () {
            var row = $(this).closest('.work-phase-row');
            var addButton = row.find('.add-row-btn');
            var removeButton = row.find('.remove-row-btn');
            var hasValue = $(this).val() !== '';

            addButton.prop('disabled', !hasValue);
            removeButton.prop('disabled', !hasValue);
        });

        // Handle remove button click to show modal
        $(document).on('click', '.remove-row-btn', function () {
            rowToRemove = $(this).closest('.work-phase-row');
            $('#confirmRemoveModal').modal('show');
        });

        // Handle confirmation in modal
        $('#confirmRemoveBtn').on('click', function () {
            if (rowToRemove) {
                rowToRemove.remove();
                rowToRemove = null;
            }
            $('#confirmRemoveModal').modal('hide');
        });

        // Add new row when "Add" button is clicked
        $(document).on('click', '.add-row-btn', function () {
            rowIndex++;
            var newRow = $('.work-phase-row').first().clone();

            // Update IDs and names
            newRow.find('select, input').val('');
            newRow.find('select[name^="WorkPhases"]').first().attr('name', 'WorkPhases[' + rowIndex + '].WorkphaseName');

            // Uncheck checkboxes
            newRow.find('input[type="checkbox"]').prop('checked', false);

            // Update hidden fields
            newRow.find('input[name$=".RelatedWorkOrder"]').attr('name', 'WorkPhases[' + rowIndex + '].RelatedWorkOrder').val('@Model.id');
            newRow.find('input[name$=".Id"]').attr('name', 'WorkPhases[' + rowIndex + '].Id').val(0);

            // Update other fields
            newRow.find('input[id^="completed"]').attr({
                'name': 'WorkPhases[' + rowIndex + '].Completed',
                'id': 'completed_' + rowIndex
            });
            newRow.find('label[for^="completed"]').attr('for', 'completed_' + rowIndex);
            newRow.find('input[id^="qualitycheck"]').attr({
                'name': 'WorkPhases[' + rowIndex + '].QualityCheck',
                'id': 'qualitycheck_' + rowIndex
            });
            newRow.find('label[for^="qualitycheck"]').attr('for', 'qualitycheck_' + rowIndex);
            newRow.find('select').last().attr('name', 'WorkPhases[' + rowIndex + '].QualityOperator');

            // Enable the Add and Remove buttons for populated rows
            newRow.find('.add-row-btn').prop('disabled', false);
            newRow.find('.remove-row-btn').prop('disabled', false);

            $('#workPhasesContainer').append(newRow);
        });

        // Initialize buttons state on page load
        $('.work-phase-select').each(function () {
            var row = $(this).closest('.work-phase-row');
            var addButton = row.find('.add-row-btn');
            var removeButton = row.find('.remove-row-btn');
            var hasValue = $(this).val() !== '';

            addButton.prop('disabled', !hasValue);
            removeButton.prop('disabled', !hasValue);
        });
    });







// Handle form submission
$('#worktableForm').on('submit', function() {
    $('.form-check-input[type="checkbox"]').each(function() {
        var $checkbox = $(this);
        var name = $checkbox.attr('name');
        
        // Create or update hidden field
        var $hidden = $('<input type="hidden">')
            .attr('name', name)
            .val($checkbox.is(':checked') ? 'true' : 'false');
        
        // Add hidden field to form
        $checkbox.after($hidden);
    });
    return true;
});

// Initialize new rows
$(document).on('click', '.add-row-btn', function() {
    // ... your existing add row code ...
    
    // After appending the new row, update the checkboxes
    newRow.find('.form-check-input[type="checkbox"]').each(function() {
        $(this).prop('checked', false)
               .val('false');
    });
});






</script>