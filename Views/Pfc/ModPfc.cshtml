@using mes.Models.ViewModels;
@using mes.Models.InfrastructureModels;

@{
    ViewBag.Title = "Modifica Pfc";
    
    List<string> customers = ViewBag.Customers;
    
    int nCommessa = Convert.ToInt32(Model.id);
    string nCommessaTitle = Model.WorkNumber;
    string userRoles = ViewBag.userRoles;
    bool cannotSign = true;
    
    if(!userRoles.Contains("PfcQualita") || !userRoles.Contains("PfcCrea") || !userRoles.Contains("root"))
        cannotSign = false;
    
    bool cannotCreate = true;
    
    if(userRoles.Contains("PfcCrea") || userRoles.Contains("root"))
        cannotCreate = false;
        
    bool cannotUpdateBool = false;
    string cannotUpdate = "enabled";
    
    if(userRoles.Contains("PfcAggiorna")) {
        cannotUpdateBool = true;
        cannotUpdate = "disabled";
    }
    
    // Generate unique IDs for the dropdown elements
    string dropdownButtonId = $"externalRefsDropdownButton_{Guid.NewGuid().ToString("N").Substring(0, 8)}";
    string dropdownMenuId = $"externalRefsDropdownMenu_{Guid.NewGuid().ToString("N").Substring(0, 8)}";
    string validationDivId = $"externalRefsValidation_{Guid.NewGuid().ToString("N").Substring(0, 8)}";
    string hiddenCsvInputId = $"externalRefsCsv_{Guid.NewGuid().ToString("N").Substring(0, 8)}";
    
    List<PfcCsvDaneaSource> allDaneaOrders = ViewBag.allDaneaOrders;
}

@model WorkorderViewModel;

@section Styles {
    <style>
        /* Styles for checkbox dropdown */
        .checkbox-dropdown .dropdown-menu { padding: 0.5rem 0; max-height: 250px; overflow-y: auto; width: 100%; }
        .checkbox-dropdown .dropdown-item-text { padding: 0.25rem 1rem; cursor: default; display: block; white-space: normal; }
        .checkbox-dropdown .dropdown-item-text:hover { background-color: #f8f9fa; }
        .checkbox-dropdown .form-check-label { cursor: pointer; width: 100%; }
        .checkbox-dropdown .btn.is-invalid { border-color: var(--bs-danger); }

        /* File upload styles */
        .file-upload-container {
            border: 2px dashed #ced4da;
            border-radius: 5px;
            padding: 20px;
            text-align: center;
            margin-bottom: 20px;
            transition: all 0.3s ease;
        }

        .file-upload-container:hover {
            border-color: #6c757d;
        }

        .file-upload-container.dragover {
            background-color: #f8f9fa;
            border-color: #28a745;
        }

        .uploaded-files-list {
            margin-top: 15px;
            max-height: 200px;
            overflow-y: auto;
        }

        .uploaded-file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            margin-bottom: 5px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }

        .remove-file-btn {
            color: #dc3545;
            cursor: pointer;
            padding: 0 5px;
        }

        .existing-file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            margin-bottom: 5px;
            background-color: #e9ecef;
            border-radius: 4px;
        }

        .existing-file-name a {
            color: #0d6efd;
            text-decoration: none;
            margin-right: 5px;
        }
        .existing-file-name a:hover {
            text-decoration: underline;
        }
        .existing-file-name a.download-link {
            color: #6c757d;
            font-size: 0.9em;
        }
    </style>
}

<!-- File Remove Confirmation Modal -->
<div class="modal fade" id="confirmFileRemoveModal" tabindex="-1" aria-labelledby="confirmFileRemoveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmFileRemoveModalLabel">Conferma Rimozione File</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Sei sicuro di voler rimuovere questo file?
                <p class="fw-bold mt-2" id="fileToRemoveName"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-danger" id="confirmFileRemoveBtn">Conferma</button>
            </div>
        </div>
    </div>
</div>


<div class="container">
    <h2>Modifica PFC</h2>
    <br>
    <hr>
    
    @using (Html.BeginForm("ModPfc", "Pfc", FormMethod.Post, new { @class = "form", id = "worktableForm", enctype = "multipart/form-data" }))
    {
        <div class="row">
            <div class="col-md-3">
                <h4>modulo numero</h4>
            </div>
            <div class="col-md-3">
                <h4>@nCommessaTitle</h4>
                <input type="hidden" name="WorkNumber" value="@Model.WorkNumber">
                <input type="hidden" name="id" value="@Model.id">
            </div>
        </div>
        
        <br>
        
        <div class="row mb-3">
            <div class="col-md-2">
                <label for="customer" class="form-label">Cliente</label>
            </div>
            <div class="col-md-6">
                <select class="form-select" id="customer" name="customer-visible" required @cannotUpdate>
                    <option value="">seleziona un cliente</option>
                    @foreach (var customer in customers)
                    {
                        <option value="@customer" selected="@(Model.Customer == customer ? "selected" : null)">@customer</option>
                    }
                </select>
                <input type="hidden" name="Customer" id="hidden-customer" value="@Model.Customer">
            </div>
            
            <div class="col-md-2">
                <label for="deliveryDate" class="form-label" style="text-align: right;">Data di consegna</label>
            </div>
            <div class="col-md-2">
                <input type="date" class="form-control" id="deliveryDate" name="deliveryDate-visible" value="@Model.deliveryDate.ToString("yyyy-MM-dd")" required disabled="@cannotUpdateBool">
                <input type="hidden" id="hiddenDeliveryDate" name="deliveryDate" value="@Model.deliveryDate.ToString("yyyy-MM-dd")">
            </div>
        </div>
        
        <!-- Checkbox Dropdown Section -->
        <div class="row mb-3">
            <div class="col-md-2">
                <label class="form-label pt-1">Commesse Correlate</label>
            </div>
            <div class="col-md-8">
                <div class="dropdown checkbox-dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button"
                            id="@dropdownButtonId" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false" @cannotUpdate>
                        Seleziona Commesse
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="@dropdownButtonId" id="@dropdownMenuId">
                        @if (allDaneaOrders != null && allDaneaOrders.Any())
                        {
                            int orderIndex = 0;
                            foreach (var order in allDaneaOrders)
                            {
                                string checkboxId = $"selectableOrderCheck_{orderIndex}";
                                bool isChecked = order.Taken == "1";
                                <li>
                                    <div class="dropdown-item-text">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="SelectedExternalRefs_Source"
                                                   value="@order.NCommessa" id="@checkboxId" @(isChecked ? "checked" : "")>
                                            <label class="form-check-label" for="@checkboxId">@order.NCommessa</label>
                                        </div>
                                    </div>
                                </li>
                                orderIndex++;
                            }
                        }
                        else
                        {
                            <li><span class="dropdown-item-text text-muted fst-italic">Nessuna commessa selezionabile disponibile.</span></li>
                        }
                    </ul>
                    <div id="@validationDivId" class="invalid-feedback" style="display: none;">Selezionare almeno una commessa correlata.</div>
                </div>
                <input type="hidden" name="ExternalRef" id="@hiddenCsvInputId" value="@Model.ExternalRef" />
            </div> <!--- End dropdown --->
                <!-- Add checkbox for EnableFutureSelection here -->
                <div class="col-md-2">
                    <div class="form-check mt-2">
                        <input class="form-check-input" type="checkbox" id="enableFutureSelection" name="EnableFutureSelection" value="1">
                        <label class="form-check-label" for="enableFutureSelection">Abilita selezione futura</label>
                    </div>
                </div>               

<!-- File Upload Section (Updated HTML) -->
<br>
    <div class="row mb-3">
        <div class="col-12"><strong>Allegati</strong></div>
    </div>

    <div class="row mb-2">
        <div class="col-md-12">
@if(!cannotCreate)
{                
            <div class="file-upload-container" id="fileDropZone">
                <div class="text-center">
                    <i class="bi bi-upload fs-3"></i>
                    <p class="mb-2">Trascina i file qui o</p>
                    <label for="fileUploadInput" class="btn btn-outline-primary">Seleziona file</label>
                    <input type="file" id="fileUploadInput" multiple style="display: none;" accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png">
                    <input type="hidden" id="folderPath" name="FolderPath" value="@ViewBag.baseFolder">
                    <p class="text-muted mt-2 small">Formati supportati: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG</p>
                </div>
            </div>
}
            <div class="uploaded-files-list" id="uploadedFilesList">
                <!-- Existing files from ViewBag.pfcFiles will be added here via JavaScript -->
            </div>
            <!-- Hidden container for file inputs and existing files input -->
            <div id="fileInputsContainer" style="display: none;">
                <input type="hidden" id="existingFilesInput" name="ExistingFiles" value="">
            </div>
        </div>
    </div>
    <!-- END File Upload Section -->



        </div> <!-- End row --->
        
        <br>
        <hr>
        
        <div class="row mb-3">
            <div class="col-12">
                <strong>fasi di lavorazione</strong>
            </div>
        </div>
        
        <br>
        
        <div id="workPhasesContainer">
            @for (int i = 0; i < Model.WorkPhases.Count; i++)
            {
                var phase = Model.WorkPhases[i];
                <div class="work-phase-row row mb-3">
                    <div class="col-md-2">
                        <select class="form-select work-phase-select" name="WorkPhases[@i].WorkphaseName" required @cannotUpdate>
                            <option value="" disabled>fase di lavorazione</option>
                            @foreach (var workPhase in ViewBag.WorkPhases)
                            {
                                <option value="@workPhase" selected="@(phase.WorkphaseName == workPhase ? "selected" : null)">@workPhase</option>
                            }
                        </select>
                        @if (cannotUpdateBool)
                        {
                            <input type="hidden" name="WorkPhases[@i].WorkphaseName" value="@phase.WorkphaseName" class="workphase-hidden-value">
                        }
                    </div>
                    
                    <div class="col-md-1 hidden-fields">
                        <input type="hidden" name="WorkPhases[@i].RelatedWorkOrder" value="@nCommessa">
                        <input type="hidden" name="WorkPhases[@i].Id" value="@phase.id">
                    </div>
                    
                    <div class="col-md-2">
                        <div class="form-check mt-1">
                            <input class="form-check-input quality-checkbox" type="checkbox"
                                id="qualitycheck_@i"
                                name="WorkPhases[@i].QualityCheck"
                                value="true"
                                @(phase.QualityCheck == "true" ? "checked" : "")
                                disabled="@cannotSign">
                            <input type="hidden" name="WorkPhases[@i].QualityCheck" value="false">
                            <label class="form-check-label" for="qualitycheck_@i">controllo qualità</label>                        
                        </div>
                    </div>
                    
                    <div class="col-md-2">
                        <select class="form-select quality-operator" name="WorkPhases[@i].QualityOperator" disabled="@cannotSign">
                            <option value="" disabled>firma operatore</option>
                            @foreach (var op in ViewBag.Operators)
                            {
                                <option value="@op" selected="@(phase.QualityOperator == op ? "selected" : null)">@op</option>
                            }
                        </select>
                        @if (cannotSign)
                        {
                            <input type="hidden" name="WorkPhases[@i].QualityOperator" value="@phase.QualityOperator" class="operator-hidden-value">
                        }
                        <div class="invalid-feedback quality-operator-error" style="display: none;">Selezionare un operatore</div>
                    </div>
                    
                    <div class="col-md-2">
                        <button type="button" class="btn btn-outline-success btn-block add-row-btn" disabled="@cannotCreate">aggiungi fase</button>
                    </div>
                    
                    <div class="col-md-1">
                        <button type="button" class="btn btn-outline-warning btn-block remove-row-btn" disabled="@cannotCreate">rimuovi</button>
                    </div>
                </div>
            }
        </div>
        
        <div class="row mb-3">
            <div class="col-md-2">
                <button type="submit" id="submitBtn" class="btn btn-primary">Salva</button>
            </div>
            <div class="col-md-2">
                <a class="btn btn-outline-secondary btn-block" asp-controller="Pfc" asp-action="Index">annulla</a>
            </div>
        </div>
    }
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmRemoveModal" tabindex="-1" aria-labelledby="confirmRemoveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmRemoveModalLabel">Conferma Eliminazione</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Sei sicuro di voler eliminare questa fase di lavorazione?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-warning" id="confirmRemoveBtn">Conferma</button>
            </div>
        </div>
    </div>
</div>

<!-- Submit Confirmation Modal -->
<div class="modal fade" id="confirmSubmitModal" tabindex="-1" aria-labelledby="confirmSubmitModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmSubmitModalLabel">Conferma Salvataggio</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Sei sicuro di voler salvare le modifiche?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-primary" id="confirmSubmitBtn">Conferma</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        // Keep hidden customer field in sync with visible dropdown
        $('#customer').on('change', function() {
            $('#hidden-customer').val($(this).val());
        });
        $('#hidden-customer').val($('#customer').val());

        var existingWorks = JSON.parse('@Html.Raw(Json.Serialize(@ViewBag.Works))');
        var rowIndex = @Model.WorkPhases.Count;
        var rowToRemove = null;
        var firstOperator = '@(ViewBag.Operators != null && ViewBag.Operators.Count > 0 ? ViewBag.Operators[0] : "")';
        var lastAddedRow = null;
        var canAddNewRow = true;
        var cannotUpdateBool = @(cannotUpdateBool.ToString().ToLower());
        var cannotSign = @(cannotSign.ToString().ToLower());
        
        // --- Checkbox Dropdown Logic ---
        var $dropdownMenu = $('#@dropdownMenuId');
        var $dropdownButton = $('#@dropdownButtonId');
        var $validationMessageDiv = $('#@validationDivId');
        var $hiddenCsvInput = $('#@hiddenCsvInputId');
        var sourceCheckboxSelector = 'input[type="checkbox"][name="SelectedExternalRefs_Source"]';

        function updateButtonText() {
            var $checkedCheckboxes = $dropdownMenu.find(sourceCheckboxSelector + ':checked');
            var count = $checkedCheckboxes.length;
            
            if (count === 0) {
                $dropdownButton.text('Seleziona Commesse');
            } else {
                var selectedLabels = $checkedCheckboxes.map(function() {
                    return $(this).closest('.form-check').find('label').text().trim();
                }).get();
                
                if (count <= 2) {
                    $dropdownButton.text(selectedLabels.join(', '));
                } else {
                    $dropdownButton.text(count + ' commesse selezionate');
                }
            }
            
var enableFutureSelection = '@ViewBag.enableFutureSelection';

// Check the checkbox if the value is "1"
if (enableFutureSelection === "1") {
    $('#enableFutureSelection').prop('checked', true);
} else {
    $('#enableFutureSelection').prop('checked', false);
}            

            $dropdownButton.removeClass('is-invalid');
            $validationMessageDiv.hide();
            updateHiddenCsvInput();
        }
        
        function updateHiddenCsvInput() {
            var $checkedCheckboxes = $dropdownMenu.find(sourceCheckboxSelector + ':checked');
            var selectedValuesArray = $checkedCheckboxes.map(function() {
                return $(this).val();
            }).get();
            $hiddenCsvInput.val(selectedValuesArray.join(','));
        }

        $('#deliveryDate').on('change', function() {
            $('#hiddenDeliveryDate').val($(this).val());
        });

        $dropdownMenu.on('change', sourceCheckboxSelector, updateButtonText);
        updateButtonText();
        // --- End Checkbox Dropdown Logic ---

        // Initialize hidden input values for disabled selects
        if (cannotUpdateBool) {
            $('.work-phase-select').each(function() {
                var selectVal = $(this).val();
                var row = $(this).closest('.work-phase-row');
                var hiddenInput = row.find('.workphase-hidden-value');
                if (hiddenInput.length) {
                    hiddenInput.val(selectVal);
                }
            });
        }
        
        if (cannotSign) {
            $('.quality-operator').each(function() {
                var selectVal = $(this).val();
                var row = $(this).closest('.work-phase-row');
                var hiddenInput = row.find('.operator-hidden-value');
                if (hiddenInput.length) {
                    hiddenInput.val(selectVal);
                }
            });
        }

// Handle quality checkbox changes
$(document).on('change', '.quality-checkbox', function() {
    // Validate operator selection if checking
    if ($(this).prop('checked')) {
        validateOperatorSelection($(this).closest('.work-phase-row'));
    }
});

//the fucking function
// Add event handler for the enableFutureSelection checkbox
$('#enableFutureSelection').on('change', function(){
    console.log('Enable future selection: ' + (this.checked ? '1' : '0'));
    var customer = $('#customer').val() || $('#hidden-customer').val();
    var delivery = $('#deliveryDate').val() || $('#hiddenDeliveryDate').val();
    var id = $('input[name="id"]').val(); // Get the ID value from the hidden input
    
    window.location.href = "/Pfc/ModPfc?inputId=" + '@Model.id' + 
                            "&EnableFutureSelection=" + (this.checked ? "1" : "0");
});


        // Handle operator selection changes
        $(document).on('change', '.quality-operator', function() {
            var row = $(this).closest('.work-phase-row');
            var hiddenInput = row.find('.operator-hidden-value');
            if (hiddenInput.length) {
                hiddenInput.val($(this).val());
            }
            
            if (row.find('.quality-checkbox').prop('checked')) {
                validateOperatorSelection(row);
            }
        });

        function validateOperatorSelection(row) {
            var operatorSelect = row.find('.quality-operator');
            var errorDiv = row.find('.quality-operator-error');
            
            if (!operatorSelect.val() || operatorSelect.val() === "") {
                operatorSelect.addClass('is-invalid');
                errorDiv.show();
                return false;
            } else {
                operatorSelect.removeClass('is-invalid');
                errorDiv.hide();
                return true;
            }
        }

        // Monitor phase selection changes
        $(document).on('change', '.work-phase-select', function() {
            var row = $(this).closest('.work-phase-row');
            var addButton = row.find('.add-row-btn');
            var removeButton = row.find('.remove-row-btn');
            var hasValue = $(this).val() !== '';
            
            // Update the hidden input value if it exists
            var hiddenInput = row.find('.workphase-hidden-value');
            if (hiddenInput.length) {
                hiddenInput.val($(this).val());
            }

            if (!cannotUpdateBool) {
                addButton.prop('disabled', !hasValue);
                removeButton.prop('disabled', !hasValue);
            }

            if (lastAddedRow && row[0] === lastAddedRow[0] && hasValue) {
                canAddNewRow = true;
                lastAddedRow = null;
            }
        });

        // Handle remove button click
        $(document).on('click', '.remove-row-btn', function() {
            rowToRemove = $(this).closest('.work-phase-row');
            $('#confirmRemoveModal').modal('show');
        });

        $('#confirmRemoveBtn').on('click', function() {
            if (rowToRemove) {
                rowToRemove.remove();
                rowToRemove = null;
            }
            $('#confirmRemoveModal').modal('hide');
        });

        // Add new row
        $(document).on('click', '.add-row-btn', function() {
            if (!canAddNewRow) return;

            var newRow = $($('.work-phase-row')[0]).clone();
            
            // Clear values and update names/ids
            newRow.find('select, input').val('');
            newRow.find('input[type="checkbox"]').prop('checked', false);
            
            // Update work phase select
            var workPhaseSelect = newRow.find('.work-phase-select')
                .attr('name', 'WorkPhases[' + rowIndex + '].WorkphaseName')
                .val('');
            
            // Update hidden workphase value input if it exists
            var workPhaseHidden = newRow.find('.workphase-hidden-value');
            if (workPhaseHidden.length) {
                workPhaseHidden.attr('name', 'WorkPhases[' + rowIndex + '].WorkphaseName').val('');
            } else if (cannotUpdateBool) {
                // Add hidden input if it doesn't exist but is needed
                workPhaseSelect.after('<input type="hidden" name="WorkPhases[' + rowIndex + '].WorkphaseName" value="" class="workphase-hidden-value">');
            }
            
            // Update hidden fields
            newRow.find('input[name$=".RelatedWorkOrder"]')
                .attr('name', 'WorkPhases[' + rowIndex + '].RelatedWorkOrder')
                .val('@Model.id');
                
            newRow.find('input[name$=".Id"]')
                .attr('name', 'WorkPhases[' + rowIndex + '].Id')
                .val(0);
                
            // Update quality check
            newRow.find('input[type="hidden"][name$=".QualityCheck"]')
                .attr('name', 'WorkPhases[' + rowIndex + '].QualityCheck')
                .val('false');
                
            newRow.find('.quality-checkbox')
                .attr('id', 'qualitycheck_' + rowIndex)
                .prop('checked', false);
                
            newRow.find('label[for^="qualitycheck"]')
                .attr('for', 'qualitycheck_' + rowIndex);
                
            // Update quality operator
            var qualityOperator = newRow.find('.quality-operator')
                .attr('name', 'WorkPhases[' + rowIndex + '].QualityOperator')
                .val(firstOperator);
                
            // Update or add hidden operator value input if needed
            var operatorHidden = newRow.find('.operator-hidden-value');
            if (operatorHidden.length) {
                operatorHidden.attr('name', 'WorkPhases[' + rowIndex + '].QualityOperator').val(firstOperator);
            } else if (cannotSign) {
                // Add hidden input if it doesn't exist but is needed
                qualityOperator.after('<input type="hidden" name="WorkPhases[' + rowIndex + '].QualityOperator" value="' + firstOperator + '" class="operator-hidden-value">');
            }
            
            // Disable buttons initially
            newRow.find('.add-row-btn, .remove-row-btn').prop('disabled', true);
            
            // Apply cannotUpdate restrictions
            if (cannotUpdateBool) {
                newRow.find('.work-phase-select').prop('disabled', true);
            }
            
            $('#workPhasesContainer').append(newRow);
            rowIndex++;
            
            lastAddedRow = newRow;
            canAddNewRow = false;
        });

        // Initialize buttons state
        $('.work-phase-select').each(function() {
            var row = $(this).closest('.work-phase-row');
            var addButton = row.find('.add-row-btn');
            var removeButton = row.find('.remove-row-btn');
            var hasValue = $(this).val() !== '';

            if (cannotUpdateBool) {
                addButton.prop('disabled', true);
                removeButton.prop('disabled', true);
                $(this).prop('disabled', true);
            } else {
                addButton.prop('disabled', !hasValue);
                removeButton.prop('disabled', !hasValue);
            }
        });

        // Form submission
        $('#submitBtn').on('click', function(e) {
            e.preventDefault();
            
            // Validate dropdown selection
            var $checkedDropdownCheckboxes = $dropdownMenu.find(sourceCheckboxSelector + ':checked');
            var isValid = true;
            
            if ($checkedDropdownCheckboxes.length === 0 && $dropdownMenu.find(sourceCheckboxSelector).length > 0) {
                $dropdownButton.addClass('is-invalid');
                $validationMessageDiv.show();
                isValid = false;
            } else {
                $dropdownButton.removeClass('is-invalid');
                $validationMessageDiv.hide();
                updateHiddenCsvInput();
            }
            
            // Validate quality operators for checked phases
            $('.work-phase-row').each(function() {
                var row = $(this);
                if (row.find('.quality-checkbox').prop('checked')) {
                    if (!validateOperatorSelection(row)) {
                        isValid = false;
                    }
                }
            });
            
            if (isValid) {
                $('#confirmSubmitModal').modal('show');
            } else {
                $('html, body').animate({
                    scrollTop: $('.is-invalid').first().offset().top - 100
                }, 500);
            }
        });

        $('#confirmSubmitBtn').on('click', function() {
            $('#hiddenDeliveryDate').val($('#deliveryDate').val());
            $(sourceCheckboxSelector).prop('disabled', false);  // Enable checkboxes to ensure they're submitted
            $('#worktableForm').submit();
        });
    });


// --- FILE UPLOAD LOGIC ---
// Variables to store selected files
var selectedFiles = [];
var fileToRemoveIndex = -1;
var existingFiles = [];

// Load existing files from ViewBag
function loadExistingFiles() {
    // Get existing files from ViewBag.pfcFiles
    @if (ViewBag.pfcFiles != null && ((List<string>)ViewBag.pfcFiles).Count > 0)
    {
        <text>
        existingFiles = [
            @foreach (var file in (List<string>)ViewBag.pfcFiles)
            {
                <text>'@file',</text>
            }
        ];
        </text>
    }
    
    // Display existing files in the list
    displayExistingFiles();
    
    // Initialize the hidden input field
    updateExistingFilesInput();
}

// Display existing files in the list
function displayExistingFiles() {
    var filesListElement = $('#uploadedFilesList');
    filesListElement.empty();
    
    // Define browser-viewable file types
    var viewableTypes = ['.pdf', '.jpg', '.jpeg', '.png', '.gif'];
    
    existingFiles.forEach(function(fileName) {
        var ext = fileName.substring(fileName.lastIndexOf('.')).toLowerCase();
        var isViewable = viewableTypes.includes(ext);
        

        
var viewUrl = '/Pfc/ViewFile?nCommessa=@ViewBag.nCommessa&fileName=' + encodeURIComponent(fileName);
var downloadUrl = '/Pfc/DownloadFile?nCommessa=@ViewBag.nCommessa&fileName=' + encodeURIComponent(fileName);

var fileLink = isViewable 
    ? '<a href="' + viewUrl + '" target="_blank">' + fileName + '</a> (<a href="' + downloadUrl + '">Download</a>)'
    : '<a href="' + downloadUrl + '">' + fileName + '</a>';

        var fileItem = $('<div class="existing-file-item">' +
                      '<div class="existing-file-name">' + fileLink + '</div>' +
                      '<div>' +
                      '<span class="remove-file-btn" data-filename="' + fileName + '">×</span>' +
                      '</div>' +
                      '</div>');
                      
        filesListElement.append(fileItem);
    });
    
    selectedFiles.forEach(function(file, index) {
        addFileToList(file, index);
    });
}

// Event listeners for drag and drop functionality
var $dropZone = $('#fileDropZone');

$dropZone.on('dragover', function(e) {
    e.preventDefault();
    e.stopPropagation();
    $(this).addClass('dragover');
});

$dropZone.on('dragleave', function(e) {
    e.preventDefault();
    e.stopPropagation();
    $(this).removeClass('dragover');
});

$dropZone.on('drop', function(e) {
    e.preventDefault();
    e.stopPropagation();
    $(this).removeClass('dragover');
    
    var files = e.originalEvent.dataTransfer.files;
    handleFiles(files);
});

// Click to select files
$('#fileUploadInput').on('change', function(e) {
    var files = e.target.files;
    handleFiles(files);
    // Reset file input to allow selecting the same file again
    $(this).val('');
});

// Handle the selected files
function handleFiles(files) {
    if (files.length === 0) return;
    
    // Add files to the selectedFiles array
    for (var i = 0; i < files.length; i++) {
        var file = files[i];
        
        // Check file type
        var acceptedTypes = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.jpeg', '.png'];
        var fileExt = '.' + file.name.split('.').pop().toLowerCase();
        
        if (!acceptedTypes.includes(fileExt)) {
            alert('Tipo di file non supportato: ' + file.name + '\nTipi supportati: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG');
            continue;
        }
        
        // Add file to array
        selectedFiles.push(file);
    }
    
    // Update display
    displayExistingFiles();
    
    // Update file inputs
    updateFileInputs();
}

// Add a file to the display list
function addFileToList(file, index) {
    var fileSize = formatFileSize(file.size);
    var fileItem = $('<div class="uploaded-file-item">' +
                    '<div class="file-info">' +
                    '<span class="file-name">' + file.name + '</span> ' +
                    '<span class="file-size text-muted">(' + fileSize + ')</span>' +
                    '</div>' +
                    '<span class="remove-file-btn" data-index="' + index + '">×</span>' +
                    '</div>');
    
    $('#uploadedFilesList').append(fileItem);
}

// Format file size
function formatFileSize(bytes) {
    if (bytes < 1024) return bytes + ' B';
    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
    else return (bytes / 1048576).toFixed(1) + ' MB';
}

// Update file inputs for form submission
function updateFileInputs() {
    // Clear previous inputs
    $('#fileInputsContainer').empty();
    
    // Create an input for each file
    selectedFiles.forEach(function(file, index) {
        var dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        
        var newFileInput = $('<input type="file" name="UploadedFiles" multiple style="display:none">');
        newFileInput.get(0).files = dataTransfer.files;
        
        $('#fileInputsContainer').append(newFileInput);
    });
    
    // Update existing files input
    updateExistingFilesInput();
}

// Add or update the hidden input for existing files
function updateExistingFilesInput() {
    // Make sure the hidden input exists
    if ($('#existingFilesInput').length === 0) {
        $('<input type="hidden" id="existingFilesInput" name="ExistingFiles" value="">').appendTo('#fileInputsContainer');
    }
    
    // Update the value of the existing hidden input with current existingFiles array
    $('#existingFilesInput').val(existingFiles.join(','));
    
    // Log for debugging
    console.log("Updated ExistingFiles input with value: " + existingFiles.join(','));
}

// Handle file removal
$(document).on('click', '.remove-file-btn', function() {
    if ($(this).data('index') !== undefined) {
        // This is a new file being uploaded
        fileToRemoveIndex = $(this).data('index');
        $('#fileToRemoveName').text(selectedFiles[fileToRemoveIndex].name);
    } else {
        // This is an existing file
        var filename = $(this).data('filename');
        $('#fileToRemoveName').text(filename);
        fileToRemoveIndex = 'existing:' + filename;
    }
    
    $('#confirmFileRemoveModal').modal('show');
});

$('#confirmFileRemoveBtn').on('click', function() {
    if (fileToRemoveIndex !== -1) {
        if (typeof fileToRemoveIndex === 'string' && fileToRemoveIndex.startsWith('existing:')) {
            // Remove existing file
            var filename = fileToRemoveIndex.substring(9);
            var index = existingFiles.indexOf(filename);
            if (index > -1) {
                existingFiles.splice(index, 1);
                
                // Update the hidden input immediately
                updateExistingFilesInput();
            }
        } else {
            // Remove new file
            selectedFiles.splice(fileToRemoveIndex, 1);
            
            // Update file inputs
            updateFileInputs();
        }
        
        // Refresh the display list
        displayExistingFiles();
        
        fileToRemoveIndex = -1;
    }
    $('#confirmFileRemoveModal').modal('hide');
});

// Click on dropzone to trigger file select
$dropZone.on('click', function(e) {
    if ($(e.target).closest('label, input').length === 0) {
        $('#fileUploadInput').click();
    }
});

// Make sure form submission includes the ExistingFiles field
$('#worktableForm').on('submit', function(e) {
    // Make sure ExistingFiles is updated before submission
    updateExistingFilesInput();
    
    // Debug logging
    console.log("Form submitted with ExistingFiles: " + $('#existingFilesInput').val());
    
    // Continue with form submission
    return true;
});

// Load existing files when the page loads
$(document).ready(function() {
    loadExistingFiles();
});
</script>