@{
    string machineName = ViewBag.machineName;
    string startWeek = ViewBag.startWeek;
    string endWeek = ViewBag.endWeek;
    string errorMsg = ViewBag.errorMsg;
}

<h2>Dettagli macchina per @machineName</h2>
<br>
<hr>
<table>
  <tr>
    <td>
      <h5>periodo dal</h5>
    </td>
    <td>
      <input type="date" style="width:120px;" id="periodStart" name="selPeriod" value="@startWeek">
    </td>
    <td>
      <h5>al</h5>
    </td>
    <td>
      <input type="date" style="width:120px;" id="periodEnd" name="selPeriod" value="@endWeek">
    </td>
    <td>
      <a class="btn btn-outline-primary" id="update">aggiorna</a>
    </td>
  </tr>
</table>
<hr>
<br>
<br>

<link href="../wwwroot/css/styles_apex.css" />

<script src="https://cdn.jsdelivr.net/npm/moment@2.30.1/moment.min.js"></script>

<style>
    select, input {
        border-radius: 0.25em;
        border-color: rgb(196, 196, 196);
        width: 120px;
        height: 38px;
    }

    input {
        font-size: 14px;
    }
    input:hover {
        background-color: gold;
    }
    input:focus {
        background-color: lightyellow;
    }  

    #chart {
    max-width: 950px;
    margin: 35px auto;
    }

    table {
    margin: auto;
    width: 50%;
    text-align: center; 
    }    

    
</style>

<script>
    window.Promise ||
    document.write(
        '<script src="https://cdn.jsdelivr.net/npm/promise-polyfill@8/dist/polyfill.min.js"><\/script>'
    )
    window.Promise ||
    document.write(
        '<script src="https://cdn.jsdelivr.net/npm/eligrey-classlist-js-polyfill@1.2.20171210/classList.min.js"><\/script>'
    )
    window.Promise ||
    document.write(
        '<script src="https://cdn.jsdelivr.net/npm/findindex_polyfill_mdn"><\/script>'
    )
</script>


<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>    

@if(errorMsg!="" & errorMsg != null) 
{
  <div class = "row">
    <div class = "col-md-2">
      
    </div>
    <div class = "col-md-2">
      <i class="fa-solid fa-computer fa-6x"></i>
    </div>
    <div class = "col-md-5">
      <h3>@errorMsg</h3>
    </div>    
  </div>
}
else
{
  <div id="chart"></div>
}


<script>
      //debug
        var onTime =  @Html.Raw(Json.Serialize(ViewBag.OnTime));
        console.log("onTime=" + onTime);
        var workingTime =  @Html.Raw(Json.Serialize(ViewBag.WorkingTime));
        console.log("workingTime=" + workingTime);
        var days =  @Html.Raw(Json.Serialize(ViewBag.Days));
        console.log("days=" + days);
        var progs = @Html.Raw(Json.Serialize(ViewBag.ProgsXDays));
        console.log("progrs per day=" + progs);
        var progsHour = @Html.Raw(Json.Serialize(ViewBag.ProgramsPerHour));
        console.log("progrs per hour=" + progsHour);
        var comment = '@ViewBag.Comment';
        console.log(comment);
        var totalMeters = @Html.Raw(Json.Serialize(ViewBag.TotalMeters));
        console.log("metri bordati" + totalMeters);
        var totalMetersConsumed = @Html.Raw(Json.Serialize(ViewBag.TotalMetersConsumed));
        console.log("metri consumati " + totalMetersConsumed);        
      //-------------------------------

  var options = {
    series: [
      {
        name: 'Accesa',
        data: onTime,
      },
      {
        name: 'In lavorazione',
        data: workingTime,
      },
    ],
    chart: {
      type: 'bar',
      height: 500,
      stacked: true,
    },
    plotOptions: {
      bar: {
        horizontal: false,
        dataLabels: {
          total: {
            enabled: true,
            offsetX: 0,
            style: {
              fontSize: '13px',
              fontWeight: 600,
            },
            formatter: 
              function (val) {
                            // Convert minutes to hours and minutes
                            const hours = Math.floor(val / 60);
                            const minutes = val % 60;

              // Format the DateTime string
              const formattedTime =
              hours > 0
                ? `${hours}h ${minutes}'`
                : `${minutes}min`;

              return formattedTime;
            },
          },
        },
      },
    },
    stroke: {
      width: 2,
      colors: ['#fff'],
    },
    title: {
      text: comment,
    },
    xaxis: {
      categories: days,
      labels: {
        formatter: function (val) {
          return val;
        },
      },
    },
    yaxis: {
      title: {
        text: '',
      },
      labels: {
        formatter: function (val) {
          // Convert minutes to hours and minutes
          const hours = Math.floor(val / 60);
          const minutes = val % 60;

          // Format the label text
          const formattedLabel =
            minutes === 0
              ? `${hours}h`
              : `${hours}h ${minutes}'`;

          return formattedLabel;
        },
      },
    },
    tooltip: {
      y: {
        formatter: function (val, { seriesIndex, dataPointIndex, w }) {
          // Convert minutes to hours and minutes
          const hours = Math.floor(val / 60);
          const minutes = val % 60;

          // Format the tooltip text
          const formattedTooltip =
            hours > 0
              ? `${hours} ore e ${minutes} minuti`
              : `${minutes} minuti`;

          // Get the tooltip for the current bar
          const nPezzi = progs[dataPointIndex] + ' pezzi';
          const nPezziOra = progsHour[dataPointIndex] + ' pezzi ora';
          const totMeters = totalMeters[dataPointIndex] + ' metri totali';
          const totMetersConsumed = totalMetersConsumed[dataPointIndex] + ' metri consumati';

          // Multiline tooltip with custom text
          return [
            formattedTooltip,
            nPezzi,
            nPezziOra,
            totMeters,
            totMetersConsumed
          ].join('<br>');
        },
      },
    },
    fill: {
      opacity: 1,
    },
    legend: {
      position: 'top',
      horizontalAlign: 'center',
      offsetX: 40,
    },
  };

  var chart = new ApexCharts(document.querySelector('#chart'), options);
  chart.render();
</script>

<script>

var machineName = '@machineName';
  $("#update").on('click', function() {
    var perStart = $("#periodStart").val();
    var perEnd = $("#periodEnd").val();
    var redirectUrl = '/Stats/MachineDetail?machineName=' + machineName + '&startTime=' + perStart + '&endTime=' + perEnd;
    alert(redirectUrl);
    window.location.href = redirectUrl;
  });

  function getMonday(d, e) {
      d = new Date(d);
      var day = d.getDay(),
          diff = d.getDate() - day + (day == 0 ? -6 : 1) + e; // adjust when day is sunday
      return new Date(d.setDate(diff));
  }

  function getFormattedDate(d){
      // Parse the date string
      var parsedDate = new Date(d);

      // Extract day, month, and year components
      var day = parsedDate.getDate();
      var month = parsedDate.getMonth() + 1; // Month is zero-based, so we add 1
      var year = parsedDate.getFullYear();

      // Format day and month to have leading zeros if necessary
      day = day < 10 ? '0' + day : day;
      month = month < 10 ? '0' + month : month;

      // Create the formatted date string
      var formattedDate = day + '/' + month + '/' + year;

      return formattedDate;
  }

</script>