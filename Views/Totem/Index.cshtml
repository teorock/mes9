@using mes.Models.InfrastructureModels;
@using mes.Models.ViewModels;
@using System.Collections.Generic
@using mes.Models.ControllersConfig;
@using mes.Models.ControllersConfigModels;

@model List<ProductionCalendarDbModel>

@{
    string titleWeek = ViewBag.titleWeek;
    List<TotemBootstrapModel> incomingsWeek = ViewBag.incomingsWeek as List<TotemBootstrapModel>;
    List<TotemBootstrapModel> outgoingsWeek = ViewBag.outgoingsWeek as List<TotemBootstrapModel>;
    List<TotemBootstrapModel> interventionsWeek = ViewBag.interventionsWeek as List<TotemBootstrapModel>;
    string lastDate = "";
    int ouutgoingCounter = 0;
}

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    
    <style>
		.card {
			margin-bottom: 10px;
			box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2); /* Adds shadow */
			transition: 0.3s; /* Optional: Smooth transition on hover */
            min-height: 150px;
		}

		.card:hover {
			box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2); /* Optional: Stronger shadow on hover */
		}

        .row {
            margin-bottom: 15px;
        }

        .day-column {
            padding-left: 5px;
            padding-right: 5px;
        }

        .schedule-container {
            margin-top: 20px;
			width: 100%; /* Make it full width */
			padding-left: 15px;   /* Keep the original padding */
			padding-right: 15px;  /* Keep the original padding */			
        }

        /* Optional:  For visual distinction */
		
        .incoming-row {
            background-color: #f0f8ff; /* AliceBlue */
			border: 2px solid lightblue;
			box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
			padding-top: 10px;	
			border-radius: 6px;			
        }

        .outgoing-row {
            background-color: #f5f5dc; /* Beige */
			border: 2px solid lightblue;
			box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
			padding-top: 10px;	
			border-radius: 6px;
        }

        .intervention-row {
            background-color: #f0fff0; /* Honeydew */
			border: 2px solid lightblue;
			box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
			padding-top: 10px;	
			border-radius: 6px;			
        }

		.incoming-row .card {
			background-color: #e0f7fa; /* Light cyan for incoming */
		}

		.outgoing-row .card {
			background-color: #00bd1f; /* Light orange for outgoing */
		}

		.intervention-row .card {
			background-color: #f0fff0; /* Honeydew for intervention */
		}


    </style>




    <h1>Settimana @titleWeek</h1>
    <br>
    <br>
    <h3>Arrivi</h3>
    <div class="row incoming-row">    
        @{
            if (incomingsWeek != null)
            {
                string currentIncomingDay = null;

                for (int i = 0; i < incomingsWeek.Count; i++)
                {
                    var incoming = incomingsWeek[i];

                    if (incoming.ReferenceDate != currentIncomingDay)
                    {
                        // Start a new day column
                        if (currentIncomingDay != null)
                        {
                            // Close the previous day column if it exists
                            @:</div>
                        }

                        @:<div class="col-md-2 day-column">
                            @:<h4>@incoming.ReferenceDate</h4>

                        currentIncomingDay = incoming.ReferenceDate;
                    }

                    // Display the card for the current incoming
                    @:<div class="card">
                        @:<div class="card-body">
                            @:<h5 class="card-title">@incoming.Title</h5>
                            @:<p class="card-text">@incoming.Description</p>
                        @:</div>
                    @:</div>
                }
                // Close the last day column
                if (currentIncomingDay != null)
                {
                    @:</div>
                }

            }
        }
    </div>


<!-- div class="container" -->
    <h3>Consegne</h3>
    <div class="row outgoing-row">
        @{
            if (outgoingsWeek != null)
            {
                string currentOutgoingDay = null;

                for (int i = 0; i < outgoingsWeek.Count; i++)
                {
                    var outgoing = outgoingsWeek[i];

                    if (outgoing.ReferenceDate != currentOutgoingDay)
                    {
                        // Start a new day column
                        if (currentOutgoingDay != null)
                        {
                            // Close the previous day column if it exists
                            @:</div>
                        }

                        @:<div class="col-md-2 day-column">
                            @:<!-- h4>@outgoing.ReferenceDate</h4 -->

                        currentOutgoingDay = outgoing.ReferenceDate;
                    }

                    // Display the card for the current outgoing
                    @:<div class="card">
                        @:<div class="card-body">
                            @:<h5 class="card-title">@outgoing.Title</h5>
                            @:<p class="card-text">@outgoing.Description</p>
                        @:</div>
                    @:</div>
                }
                // Close the last day column
                if (currentOutgoingDay != null)
                {
                    @:</div>
                }
            }
        }
    </div>
<!-- /div -->
<!-- div class="container" -->
    <h3>Manutenzioni e interventi</em></h3>
    <div class="row intervention-row">
        @{
            if (interventionsWeek != null)
            {
                string currentInterventionDay = null;

                for (int i = 0; i < interventionsWeek.Count; i++)
                {
                    var intervention = interventionsWeek[i];

                    if (intervention.ReferenceDate != currentInterventionDay)
                    {
                        // Start a new day column
                        if (currentInterventionDay != null)
                        {
                            // Close the previous day column if it exists
                            @:</div>
                        }

                        @:<div class="col-md-2 day-column">
                            @:<!-- h4>@intervention.ReferenceDate</h4 -->

                        currentInterventionDay = intervention.ReferenceDate;
                    }

                    // Display the card for the current intervention
                    @:<div class="card">
                        @:<div class="card-body">
                            @:<h5 class="card-title">@intervention.Title</h5>
                            @:<p class="card-text">@intervention.Description</p>
                        @:</div>
                    @:</div>
                }
                // Close the last day column
                if (currentInterventionDay != null)
                {
                    @:</div>
                }
            }
        }
    </div>
<!-- /div -->

    <script>
        window.onload = function() {
            let scrollCount = 0;
            const maxScrolls = 5;  // Number of times to scroll up and down
            const displayTime = 20000; // 20 seconds (milliseconds)
            const pauseTime = 10000; // 10 seconds (milliseconds)
            let scrollingDown = true;

            function scrollToBottom() {
                window.scrollTo({
                    top: document.body.scrollHeight,
                    behavior: 'smooth',
                    scrollDuration: 10000  // Add this, adjust milliseconds for scrolling speed
                });
                setTimeout(pauseAtBottom, pauseTime); // Pause after scrolling down
            }

            function scrollToTop() {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth',
                    scrollDuration: 10000 // Add this, adjust milliseconds for scrolling speed
                });
                setTimeout(startDisplay, displayTime);  // Pause and then restart
            }

            function pauseAtBottom() {
                console.log("Pausing at bottom...");
                setTimeout(scrollToTop, pauseTime); // Pause at the bottom and then scroll up
            }

            function startDisplay() {
                console.log("Scrolling Down Start, Count: " + scrollCount);
                scrollCount++;

                if (scrollCount <= maxScrolls) {
                    scrollToBottom();
                } else {
                    console.log("Scrolling complete! Reloading...");
                    window.location.reload();  // Reload the page
                }
            }


            // Initial start of the scrolling
            startDisplay();

        };
    </script>