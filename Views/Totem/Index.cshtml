@using mes.Models.InfrastructureModels;
@using mes.Models.ViewModels;
@using System.Collections.Generic
@using mes.Models.ControllersConfig;
@using mes.Models.ControllersConfigModels;

@model List<ProductionCalendarDbModel>

@{
    string titleWeek = ViewBag.titleWeek;
    List<TotemBootstrapModel> incomingsWeek = ViewBag.incomingsWeek as List<TotemBootstrapModel>;
    List<TotemBootstrapModel> outgoingsWeek = ViewBag.outgoingsWeek as List<TotemBootstrapModel>;
    List<TotemBootstrapModel> interventionsWeek = ViewBag.interventionsWeek as List<TotemBootstrapModel>;
    string lastDate = "";
    int ouutgoingCounter = 0;
    string autoScroll = ViewBag.autoScroll;
    DateTime displayedWeek = ViewBag.DisplayedWeek != null ? (DateTime)ViewBag.DisplayedWeek : DateTime.Now;
    string showActiveButton = ViewBag.showActiveButton;
    string btnCaption = ViewBag.btnCaption;
}

<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

<style>


    /* Default card font color (black) */
    .card .card-body,
    .card .card-title,
    .card .card-text {
    color: black; /* Or whatever your default color is */
    }

    /* Override when ViewBag.showActiveButton is "0" */
    .greyed-out .card .card-body,
    .greyed-out .card .card-title,
    .greyed-out .card .card-text {
    color: grey; /* Or your desired grey color */
    }

    .card {
        margin-bottom: 10px;
        box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.3);
        transition: 0.3s;
        min-height: 150px;
        font-weight: bolder;
		cursor: pointer; /* Add a pointer cursor for better UX */
    }

    .card:hover {
        box-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.4);
    }

    .row {
        margin-bottom: 15px;
    }

    .day-column {
        padding-left: 5px;
        padding-right: 5px;
    }

    .schedule-container {
        margin-top: 20px;
        width: 100%;
        padding-left: 15px;
        padding-right: 15px;
    }


    .incoming-row {
        background-color: #a9baec;
        border: 2px solid #7180AC;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.3);
        padding-top: 10px;
        border-radius: 6px;
    }

    .outgoing-row {
        background-color: #f5f5dc;
        border: 2px solid #A8D0DB;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.3);
        padding-top: 10px;
        border-radius: 6px;
    }

    .intervention-row {
        background-color: #ebaf99;
        border: 2px solid #E49273;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.3);
        padding-top: 10px;
        border-radius: 6px;
    }

    .card-title {
        font-weight: 700;
    }

    .incoming-row .card {
        background-color: #e0f7fa;
        font-weight: 700;
    }

    .outgoing-row .card {
        background-color: #78d387;
        font-weight: 700;
    }

    .intervention-row .card {
        background-color: #f0fff0;
        font-weight: 700;
    }

    #navigator-card {
        box-shadow: none !important;
        border: 1px solid rgb(0, 123, 255) !important;
        border-radius: 5px !important;

        height: 70px !important; 
        max-height: 70px !important; 
        min-height: 70px !important; 
        overflow: hidden;
    }

    #navigator-card .card-body {
        padding: 0 !important;
    }

    #navigator-card.hover{
        box-shadow: none !important;

    }

    #btnCompletate {
        height: 70px !important; 
        max-height: 70px !important; 
        min-height: 70px !important;
        display: flex;
        align-items: center;
        justify-content: center;        
    }

    .week-navigator {
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 5px 10px;
        flex-wrap: nowrap;
        width: 100%;
    }

    .week-display {
        font-size: 2rem !important;
        font-weight: 500;
        padding: 0 8px;
        text-align: center;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        margin: 0;
        line-height: 1.2;
    }

    .week-navigator button {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        min-width: 38px;
        line-height: 1;
        margin-left: 5px;   
        margin-right: 5px;          
    }

</style>


<div class="row">
    <!-- div class="col-md-2"></div -->
    <div class="col-md-9">
        <div class="card" id="navigator-card">
            <div class="card-body">
                <div class="week-navigator">
                    <button id="prevWeek" class="btn btn-outline-primary">
                        <i class="fas fa-chevron-left fa-3x"></i>
                    </button>
                    <div id="weekDisplay" class="week-display">
                        <!-- Week will be displayed here -->
                    </div>
                    <button id="nextWeek" class="btn btn-outline-primary">
                        <i class="fas fa-chevron-right fa-3x"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <a class="btn btn-outline-primary btn-block" asp-controller="Totem" asp-action="Index" asp-route-startDate="@displayedWeek" asp-route-showActive="@showActiveButton" id="btnCompletate">@btnCaption</a>
    </div>
</div>
<div class="row">
    <div class="col-md-10">
        <h3>Arrivi</h3>
    </div>
</div>

@{
    string greyedOutClass = ViewBag.showActiveButton == "1" ? "greyed-out" : "";
}

<div class="row incoming-row @greyedOutClass">
    @{
        if (incomingsWeek != null)
        {
            string currentIncomingDay = null;

            for (int i = 0; i < incomingsWeek.Count; i++)
            {
                var incoming = incomingsWeek[i];
                string taskName = incoming.Title;

                if (incoming.ReferenceDate != currentIncomingDay)
                {
                    if (currentIncomingDay != null)
                    {                    
                        @:</div>
                    }

                    @:<div class="col-md-2 day-column">
                        @:<h4>@incoming.ReferenceDate</h4>

                    currentIncomingDay = incoming.ReferenceDate;
                }

                @:<div class="card" onclick="openConfirmationModal('@taskName', @incoming.id)">
                    @:<div class="card-body">
                        @:<h5 class="card-title">@incoming.Title</h5>
                        @:<p class="card-text">@incoming.Description</p>
                    @:</div>
                @:</div>
            }
            if (currentIncomingDay != null)
            {
                @:</div>
            }

        }
    }
</div>

<!-- div class="container" -->
<h3>Consegne</h3>
<div class="row outgoing-row @greyedOutClass">
    @{
        if (outgoingsWeek != null)
        {
            string currentOutgoingDay = null;

            for (int i = 0; i < outgoingsWeek.Count; i++)
            {
                var outgoing = outgoingsWeek[i];
                string taskName = outgoing.Title;

                if (outgoing.ReferenceDate != currentOutgoingDay)
                {
                    if (currentOutgoingDay != null)
                    {
                        @:</div>
                    }

                    @:<div class="col-md-2 day-column">
                        @:<!-- h4>@outgoing.ReferenceDate</h4 -->

                    currentOutgoingDay = outgoing.ReferenceDate;
                }

                @:<div class="card" onclick="openConfirmationModal('@taskName', @outgoing.id)">
                    @:<div class="card-body">
                        @:<h5 class="card-title">@outgoing.Title</h5>
                        @:<p class="card-text">@outgoing.Description</p>
                    @:</div>
                @:</div>
            }
            if (currentOutgoingDay != null)
            {
                @:</div>
            }
        }
    }
</div>
<!-- /div -->
<!-- div class="container" -->
<h3>Manutenzioni e interventi</em></h3>
<div class="row intervention-row @greyedOutClass">
    @{
        if (interventionsWeek != null)
        {
            string currentInterventionDay = null;

            for (int i = 0; i < interventionsWeek.Count; i++)
            {
                var intervention = interventionsWeek[i];
                string taskName = intervention.Title;

                if (intervention.ReferenceDate != currentInterventionDay)
                {
                    if (currentInterventionDay != null)
                    {
                        @:</div>
                    }

                    @:<div class="col-md-2 day-column">
                        @:<!-- h4>@intervention.ReferenceDate</h4 -->

                    currentInterventionDay = intervention.ReferenceDate;
                }

                @:<div class="card" onclick="openConfirmationModal('@taskName', @intervention.id)">
                    @:<div class="card-body">
                        @:<h5 class="card-title">@intervention.Title</h5>
                        @:<p class="card-text">@intervention.Description</p>
                    @:</div>
                @:</div>
            }
            if (currentInterventionDay != null)
            {
                @:</div>
            }
        }
    }
</div>
<!-- /div -->

<!-- Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Nascondi task</h5>
                <!-- button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">Ã—</span>
                </button -->
            </div>
            <div class="modal-body" id="confirmationModalBody">
                Are you sure?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-outline-primary" id="confirmButton">Conferma</button>
            </div>
        </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <!-- Bootstrap JS Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    let currentTaskId = null;

    function openConfirmationModal(taskName, taskId) {
        const showActiveButton = '@ViewBag.showActiveButton';
        
        if (showActiveButton !=="1") {
        document.getElementById('confirmationModalBody').innerText = "Vuoi rimuovere: " + taskName + "?";
        currentTaskId = taskId; 
        $('#confirmationModal').modal('show');
        } else {
            console.log("Action is disabled because showActiveButton is 1.");
        }
    }

    $(document).ready(function() {
        $('#confirmationModal').on('click', '[data-dismiss="modal"]', function(event) {
            $('#confirmationModal').modal('hide');
        });

        $('#confirmButton').click(function() {
            if (currentTaskId !== null) {
                window.location.href = '/Totem/HideTask?id=' + currentTaskId;
            } else {
                console.error('No task ID to hide.');
            }
        });
    });

    // Function to get week number
    function getWeekNumber(date) {
        const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
        const pastDaysOfYear = (date - firstDayOfYear) / 86400000;
        return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
    }
    
    // Format dates as YYYY-MM-DD for URL parameters
    function formatDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }
    
    // Initialize week navigation variables
    const displayedDateStr = '@displayedWeek.ToString("yyyy-MM-dd")';
    let currentDate = new Date(displayedDateStr);
    const weekDisplay = document.getElementById('weekDisplay');
    const prevWeekBtn = document.getElementById('prevWeek');
    const nextWeekBtn = document.getElementById('nextWeek');
    
    // Function to format week display with Italian month names
    function formatWeekDisplay(date) {
        const weekNumber = getWeekNumber(date);
        
        // Calculate the start of the week (Monday)
        const day = date.getDay(); // 0 is Sunday, 1 is Monday, etc.
        const diff = day === 0 ? -6 : 1 - day; // Adjust to get Monday
        
        const startOfWeek = new Date(date);
        startOfWeek.setDate(date.getDate() + diff);
        
        // Calculate the end of the week (Sunday)
        const endOfWeek = new Date(startOfWeek);
        endOfWeek.setDate(startOfWeek.getDate() + 6);
        
        // Format the dates
        const startDay = startOfWeek.getDate();
        const endDay = endOfWeek.getDate();
        const monthNames = ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", 
                        "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"];
        const startMonth = monthNames[startOfWeek.getMonth()];
        const endMonth = monthNames[endOfWeek.getMonth()];
        
        // Create the final string
        if (startMonth === endMonth) {
            return `Settimana ${weekNumber} - dal ${startDay} al ${endDay} ${startMonth}`;
        } else {
            return `Settimana ${weekNumber} - dal ${startDay} ${startMonth} al ${endDay} ${endMonth}`;
        }
    }
    
    // Update week display
    function updateWeekDisplay() {
        weekDisplay.textContent = formatWeekDisplay(currentDate);
    }
    
    // Calculate start and end of week for navigation
    function getWeekBoundaries(date) {
        const day = date.getDay();
        const diff = day === 0 ? -6 : 1 - day; // Adjust to get Monday
        
        const startOfWeek = new Date(date);
        startOfWeek.setDate(date.getDate() + diff);
        
        const endOfWeek = new Date(startOfWeek);
        endOfWeek.setDate(startOfWeek.getDate() + 6);
        
        return {
            start: startOfWeek,
            end: endOfWeek
        };
    }
    
    // Navigate to another week
    function navigateToWeek(date) {
        const boundaries = getWeekBoundaries(date);
        const startDateStr = formatDate(boundaries.start);
        const endDateStr = formatDate(boundaries.end);
        
        // Redirect to the URL with the parameters
        //window.location.href = `/Totem/index?totemnumber=1&startDate=${startDateStr}&endDate=${endDateStr}`;
        //const showActiveValue = '@showActiveButton';

        window.location.href = `/Totem/index?totemnumber=1&startDate=${startDateStr}&showActive=1`;
    }
    
    // Event listeners for navigation buttons
    prevWeekBtn.addEventListener('click', function() {
        // Subtract 7 days (1 week) from current date
        const prevWeek = new Date(currentDate);
        prevWeek.setDate(currentDate.getDate() - 7);
        navigateToWeek(prevWeek);
    });
    
    nextWeekBtn.addEventListener('click', function() {
        // Add 7 days (1 week) to current date
        const nextWeek = new Date(currentDate);
        nextWeek.setDate(currentDate.getDate() + 7);
        navigateToWeek(nextWeek);
    });
    
    // Initialize display when page loads
    updateWeekDisplay();
    
    // Auto-scrolling functionality
    window.onload = function() {
        let scrollCount = 0;
        const maxScrolls = 5;
        const displayTime = 20000;
        const pauseTime = 10000;
        const scrollingSpeed = 10000;
        let scrollingDown = @autoScroll;

        function scrollToBottom() {
            if (scrollingDown) {
                window.scrollTo({
                    top: document.body.scrollHeight,
                    behavior: 'smooth',
                    scrollDuration: 10000
                });
                setTimeout(pauseAtBottom, pauseTime);
            }
        }

        function scrollToTop() {
            if (scrollingDown) {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth',
                    scrollDuration: scrollingSpeed
                });
                setTimeout(startDisplay, displayTime);
            }
        }

        function pauseAtBottom() {
            if (scrollingDown) {
                console.log("Pausing at bottom...");
                setTimeout(scrollToTop, pauseTime);
            }
        }

        function startDisplay() {
            if (scrollingDown) {
                console.log("Scrolling Down Start, Count: " + scrollCount);
                scrollCount++;

                if (scrollCount <= maxScrolls) {
                    scrollToBottom();
                } else {
                    console.log("Scrolling complete! Reloading...");
                    window.location.reload();
                }
            }
        }

        startDisplay();
    };
</script>